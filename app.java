package com.test.aes;

import javax.crypto.Cipher;
import javax.crypto.spec.DESKeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;

/**
 * Hello world!
 *
 */
public class App 
{
	//private static String key1="ddsa3c7eda2gc7e2sasefv22hwu4528i";
	private static String key2="TATAPASS";
	
	public static void main( String[] args ) throws Exception
    {
		/*
		String r = QEncodeUtil.desEncrypt("13764564800",key1);
        System.out.println(r);

        //String r1="VsfH8igFjiIAnjV/P1od9g==";
        String f=QEncodeUtil.desDecrypt("VsfH8igFjiIAnjV/P1od9g==", key1);
        System.out.println(f);
        */

        String s=App.decrypt
        System.out.println(s);
    }
	
	@SuppressWarnings("unused")		
	public static String decrypt1(String data) throws Exception {	
		
    	byte[] bytesrc =convertHexString(data);      	
        Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");       		
        DESKeySpec desKeySpec = new DESKeySpec(key2.getBytes("UTF-8"));      		
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");      		
        SecretKey secretKey = keyFactory.generateSecret(desKeySpec);      		
        IvParameterSpec iv = new IvParameterSpec(key2.getBytes("UTF-8"));   		
               		
        cipher.init(Cipher.DECRYPT_MODE, secretKey, iv);         		
         		
        byte[] retByte = cipher.doFinal(bytesrc);   		
        return new String(retByte,"UTF-8");    		
    }		
    		
    public static byte[] convertHexString(String ss)    		
    {    		
        byte digest[] = new byte[ss.length() / 2];    		
	    for(int i = 0; i < digest.length; i++)    {    	
		    String byteString = ss.substring(2 * i, 2 * i + 2);    
		    int byteValue = Integer.parseInt(byteString, 16);    
		    digest[i] = (byte)byteValue;    
	    }	
		return digest;  
    }		
	
}





